// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReactMvcApp.Models.Entities;

#nullable disable

namespace ReactMvcApp.Migrations
{
    [DbContext(typeof(SocialWelfareDepartmentContext))]
    partial class SocialWelfareDepartmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReactMvcApp.Models.Entities.ActionHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("history_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<string>("ActionTaken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ActionTakenDate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ActionTaker")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("referenceNumber");

                    b.HasKey("HistoryId")
                        .HasName("ActionHistory_PK");

                    b.ToTable("ActionHistory", (string)null);
                });

            modelBuilder.Entity("ReactMvcApp.Models.Entities.ApplicationPerDistrict", b =>
                {
                    b.Property<int>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UUID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uuid"));

                    b.Property<int>("CountValue")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("FinancialYear")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Uuid");

                    b.ToTable("ApplicationPerDistrict", (string)null);
                });

            modelBuilder.Entity("ReactMvcApp.Models.Entities.Certificate", b =>
                {
                    b.Property<byte[]>("EncryptedCertificateData")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("EncryptedPassword")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("EncryptionIv")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("encryptionIV");

                    b.Property<byte[]>("EncryptionKey")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("encryptionKey");

                    b.Property<int>("OfficerId")
                        .HasColumnType("int");

                    b.Property<string>("RegisteredDate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Uuid")
                        .HasColumnType("int")
                        .HasColumnName("UUID");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("ReactMvcApp.Models.Entities.CitizenApplication", b =>
                {
                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AdditionalDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CitizenId")
                        .HasColumnType("int")
                        .HasColumnName("Citizen_id");

                    b.Property<string>("CreatedAt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Created_at");

                    b.Property<int>("CurrentPlayer")
                        .HasColumnType("int");

                    b.Property<string>("FormDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WorkFlow")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReferenceNumber");

                    b.ToTable("Citizen_Applications", (string)null);
                });

            modelBuilder.Entity("ReactMvcApp.Models.Entities.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DistrictID");

                    b.Property<string>("DistrictName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DistrictShort")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Division")
                        .HasColumnType("int");

                    b.ToTable("District", (string)null);
                });

            modelBuilder.Entity("ReactMvcApp.Models.Entities.OfficerDetail", b =>
                {
                    b.Property<int>("AccessCode")
                        .HasColumnType("int");

                    b.Property<string>("AccessLevel")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("DetailId")
                        .HasColumnType("int");

                    b.Property<int>("OfficerId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("OfficerDetails");
                });

            modelBuilder.Entity("ReactMvcApp.Models.Entities.OfficersDesignation", b =>
                {
                    b.Property<string>("AccessLevel")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Designation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DesignationShort")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Uuid")
                        .HasColumnType("int")
                        .HasColumnName("UUID");

                    b.ToTable("OfficersDesignations");
                });

            modelBuilder.Entity("ReactMvcApp.Models.Entities.Pool", b =>
                {
                    b.Property<int>("PoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PoolId"));

                    b.Property<int>("AccessCode")
                        .HasColumnType("int");

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("List")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("PoolId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Pool", (string)null);
                });

            modelBuilder.Entity("ReactMvcApp.Models.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool?>("ApprovalListEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Approve")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankDetails")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CreatedAt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Department")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DocumentFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormElement")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NameShort")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficerEditableField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WebService")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("webService");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ReactMvcApp.Models.Entities.Tehsil", b =>
                {
                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DistrictID");

                    b.Property<int>("TehsilId")
                        .HasColumnType("int");

                    b.Property<string>("TehsilName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.ToTable("Tehsil", (string)null);
                });

            modelBuilder.Entity("ReactMvcApp.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("BackupCodes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsEmailValid")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Profile")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RegisteredDate")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("UserType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ReactMvcApp.Models.Entities.Pool", b =>
                {
                    b.HasOne("ReactMvcApp.Models.Entities.Service", "Service")
                        .WithMany("Pools")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_Pool_Services");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ReactMvcApp.Models.Entities.Service", b =>
                {
                    b.Navigation("Pools");
                });
#pragma warning restore 612, 618
        }
    }
}
